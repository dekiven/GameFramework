apply plugin: 'com.android.library'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"



    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar'])
//
//    implementation 'com.android.support:appcompat-v7:28.0.0'
//    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    provided files('./libs/classes.jar') // Avoid redundant Unity Player in final application APK
}

android.libraryVariants.all { variant ->

    // Task names.
    String variantName = "${variant.name.capitalize()}";
    String deployTaskGroup = "plugin";
    String deployTaskName = "deploy${variantName}PluginArchive";
    String dependencyTaskName = "assemble${variantName}";

    // Source.
    String sourceAARFolder = "${buildDir.getPath()}/outputs/aar/";
    String sourceAARName = "${project.name}-${variant.name}.aar";

    // Target.
    String targetAssetFolder = "Assets/Plugins/eppz! Alert";
    String targetAARFolder = "${rootDir.getPath()}/../../${targetAssetFolder}";
    String targetAARName = "eppz! Alert Android.aar";

    // Create task.
    task(deployTaskName, dependsOn: dependencyTaskName, type: Copy) {
        logger.lifecycle("${variant.name.capitalize()} AAR Folder: ${sourceAARFolder}")
        logger.lifecycle("${variant.name.capitalize()} Target AAR Folder: ${targetAARFolder}")
        logger.lifecycle("${variant.name.capitalize()} Target AAR name: ${targetAARName}")

        from(sourceAARFolder)
        into(targetAARFolder)
        include(sourceAARName)
        rename(sourceAARName, targetAARName)
    }.group = deployTaskGroup;
}
