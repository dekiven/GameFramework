//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameFramework_UIHandlerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameFramework.UIHandler), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SetUIActive", SetUIActive);
		L.RegFunction("SetUISelectable", SetUISelectable);
		L.RegFunction("ChangeUI", ChangeUI);
		L.RegFunction("GetTextString", GetTextString);
		L.RegFunction("SetTextString", SetTextString);
		L.RegFunction("SetTextColor", SetTextColor);
		L.RegFunction("SetRichTextString", SetRichTextString);
		L.RegFunction("SetImageSprite", SetImageSprite);
		L.RegFunction("SetRawImageTexture", SetRawImageTexture);
		L.RegFunction("SetRawImageRect", SetRawImageRect);
		L.RegFunction("AddBtnClick", AddBtnClick);
		L.RegFunction("AddDropdownOnValueChanged", AddDropdownOnValueChanged);
		L.RegFunction("GetInputFieldString", GetInputFieldString);
		L.RegFunction("SetInputFeildString", SetInputFeildString);
		L.RegFunction("AddInputFieldOnValueChanged", AddInputFieldOnValueChanged);
		L.RegFunction("AddInputFieldOnEndEdit", AddInputFieldOnEndEdit);
		L.RegFunction("GetSliderValue", GetSliderValue);
		L.RegFunction("SetSliderValue", SetSliderValue);
		L.RegFunction("AddOnSliderValueChanged", AddOnSliderValueChanged);
		L.RegFunction("GetToggleIsOn", GetToggleIsOn);
		L.RegFunction("SetToggleIsOn", SetToggleIsOn);
		L.RegFunction("AddToggleOnValueChanged", AddToggleOnValueChanged);
		L.RegFunction("GetScrollbarValue", GetScrollbarValue);
		L.RegFunction("SetScrollbarValue", SetScrollbarValue);
		L.RegFunction("AddOnScrollbarValueChanged", AddOnScrollbarValueChanged);
		L.RegFunction("SetScrollbarSize", SetScrollbarSize);
		L.RegFunction("SetScrollbarStepNumber", SetScrollbarStepNumber);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("UIArray", get_UIArray, set_UIArray);
		L.RegVar("RootTransform", get_RootTransform, set_RootTransform);
		L.RegVar("Count", get_Count, null);
		L.RegVar("CompNames", get_CompNames, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUIActive(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, bool>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				bool o = obj.SetUIActive(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, bool>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				bool o = obj.SetUIActive(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.SetUIActive");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUISelectable(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, bool>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				bool o = obj.SetUISelectable(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, bool>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				bool o = obj.SetUISelectable(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.SetUISelectable");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
			GameFramework.UIHandlerData arg0 = (GameFramework.UIHandlerData)ToLua.CheckObject<GameFramework.UIHandlerData>(L, 2);
			bool o = obj.ChangeUI(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTextString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string o = obj.GetTextString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string o = obj.GetTextString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.GetTextString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, string>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				bool o = obj.SetTextString(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, string>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				bool o = obj.SetTextString(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.SetTextString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextColor(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Color>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
				bool o = obj.SetTextColor(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Color>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
				bool o = obj.SetTextColor(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.SetTextColor");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRichTextString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, string>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				bool o = obj.SetRichTextString(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, string>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				bool o = obj.SetRichTextString(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.SetRichTextString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetImageSprite(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Sprite>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Sprite arg1 = (UnityEngine.Sprite)ToLua.ToObject(L, 3);
				bool o = obj.SetImageSprite(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Sprite>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Sprite arg1 = (UnityEngine.Sprite)ToLua.ToObject(L, 3);
				bool o = obj.SetImageSprite(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.SetImageSprite");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRawImageTexture(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Texture>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
				bool o = obj.SetRawImageTexture(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Texture>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
				bool o = obj.SetRawImageTexture(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.SetRawImageTexture");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRawImageRect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, float[]>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float[] arg1 = ToLua.ToNumberArray<float>(L, 3);
				bool o = obj.SetRawImageRect(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, float[]>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float[] arg1 = ToLua.ToNumberArray<float>(L, 3);
				bool o = obj.SetRawImageRect(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Rect>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.To(L, 3);
				bool o = obj.SetRawImageRect(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Rect>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.To(L, 3);
				bool o = obj.SetRawImageRect(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.SetRawImageRect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBtnClick(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Events.UnityAction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Events.UnityAction arg1 = (UnityEngine.Events.UnityAction)ToLua.ToObject(L, 3);
				bool o = obj.AddBtnClick(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, LuaInterface.LuaFunction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool o = obj.AddBtnClick(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Events.UnityAction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Events.UnityAction arg1 = (UnityEngine.Events.UnityAction)ToLua.ToObject(L, 3);
				bool o = obj.AddBtnClick(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, LuaInterface.LuaFunction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool o = obj.AddBtnClick(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.AddBtnClick");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDropdownOnValueChanged(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, LuaInterface.LuaFunction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool o = obj.AddDropdownOnValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, LuaInterface.LuaFunction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool o = obj.AddDropdownOnValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Events.UnityAction<int>>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Events.UnityAction<int> arg1 = (UnityEngine.Events.UnityAction<int>)ToLua.ToObject(L, 3);
				bool o = obj.AddDropdownOnValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Events.UnityAction<int>>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Events.UnityAction<int> arg1 = (UnityEngine.Events.UnityAction<int>)ToLua.ToObject(L, 3);
				bool o = obj.AddDropdownOnValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.AddDropdownOnValueChanged");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInputFieldString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string o = obj.GetInputFieldString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string o = obj.GetInputFieldString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.GetInputFieldString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetInputFeildString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, string>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				bool o = obj.SetInputFeildString(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, string>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				bool o = obj.SetInputFeildString(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.SetInputFeildString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddInputFieldOnValueChanged(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, LuaInterface.LuaFunction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool o = obj.AddInputFieldOnValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, LuaInterface.LuaFunction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool o = obj.AddInputFieldOnValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Events.UnityAction<string>>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Events.UnityAction<string> arg1 = (UnityEngine.Events.UnityAction<string>)ToLua.ToObject(L, 3);
				bool o = obj.AddInputFieldOnValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Events.UnityAction<string>>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Events.UnityAction<string> arg1 = (UnityEngine.Events.UnityAction<string>)ToLua.ToObject(L, 3);
				bool o = obj.AddInputFieldOnValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.AddInputFieldOnValueChanged");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddInputFieldOnEndEdit(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, LuaInterface.LuaFunction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool o = obj.AddInputFieldOnEndEdit(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, LuaInterface.LuaFunction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool o = obj.AddInputFieldOnEndEdit(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Events.UnityAction<string>>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Events.UnityAction<string> arg1 = (UnityEngine.Events.UnityAction<string>)ToLua.ToObject(L, 3);
				bool o = obj.AddInputFieldOnEndEdit(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Events.UnityAction<string>>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Events.UnityAction<string> arg1 = (UnityEngine.Events.UnityAction<string>)ToLua.ToObject(L, 3);
				bool o = obj.AddInputFieldOnEndEdit(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.AddInputFieldOnEndEdit");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSliderValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float o = obj.GetSliderValue(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float o = obj.GetSliderValue(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.GetSliderValue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSliderValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, float>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				bool o = obj.SetSliderValue(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, float>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				bool o = obj.SetSliderValue(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.SetSliderValue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOnSliderValueChanged(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, LuaInterface.LuaFunction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool o = obj.AddOnSliderValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, LuaInterface.LuaFunction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool o = obj.AddOnSliderValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Events.UnityAction<float>>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Events.UnityAction<float> arg1 = (UnityEngine.Events.UnityAction<float>)ToLua.ToObject(L, 3);
				bool o = obj.AddOnSliderValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Events.UnityAction<float>>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Events.UnityAction<float> arg1 = (UnityEngine.Events.UnityAction<float>)ToLua.ToObject(L, 3);
				bool o = obj.AddOnSliderValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.AddOnSliderValueChanged");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetToggleIsOn(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj.GetToggleIsOn(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				bool o = obj.GetToggleIsOn(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.GetToggleIsOn");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetToggleIsOn(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, bool>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				bool o = obj.SetToggleIsOn(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, bool>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				bool o = obj.SetToggleIsOn(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.SetToggleIsOn");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddToggleOnValueChanged(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, LuaInterface.LuaFunction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool o = obj.AddToggleOnValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, LuaInterface.LuaFunction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool o = obj.AddToggleOnValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Events.UnityAction<bool>>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Events.UnityAction<bool> arg1 = (UnityEngine.Events.UnityAction<bool>)ToLua.ToObject(L, 3);
				bool o = obj.AddToggleOnValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Events.UnityAction<bool>>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Events.UnityAction<bool> arg1 = (UnityEngine.Events.UnityAction<bool>)ToLua.ToObject(L, 3);
				bool o = obj.AddToggleOnValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.AddToggleOnValueChanged");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetScrollbarValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float o = obj.GetScrollbarValue(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float o = obj.GetScrollbarValue(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.GetScrollbarValue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetScrollbarValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, float>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				bool o = obj.SetScrollbarValue(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, float>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				bool o = obj.SetScrollbarValue(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.SetScrollbarValue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOnScrollbarValueChanged(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, LuaInterface.LuaFunction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool o = obj.AddOnScrollbarValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, LuaInterface.LuaFunction>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool o = obj.AddOnScrollbarValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Events.UnityAction<float>>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Events.UnityAction<float> arg1 = (UnityEngine.Events.UnityAction<float>)ToLua.ToObject(L, 3);
				bool o = obj.AddOnScrollbarValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Events.UnityAction<float>>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Events.UnityAction<float> arg1 = (UnityEngine.Events.UnityAction<float>)ToLua.ToObject(L, 3);
				bool o = obj.AddOnScrollbarValueChanged(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.AddOnScrollbarValueChanged");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetScrollbarSize(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, float>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				bool o = obj.SetScrollbarSize(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, float>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				bool o = obj.SetScrollbarSize(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.SetScrollbarSize");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetScrollbarStepNumber(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, int>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				bool o = obj.SetScrollbarStepNumber(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, int>(L, 2))
			{
				GameFramework.UIHandler obj = (GameFramework.UIHandler)ToLua.CheckObject<GameFramework.UIHandler>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				bool o = obj.SetScrollbarStepNumber(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.UIHandler.SetScrollbarStepNumber");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIArray(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.UIHandler obj = (GameFramework.UIHandler)o;
			UnityEngine.EventSystems.UIBehaviour[] ret = obj.UIArray;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UIArray on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RootTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.UIHandler obj = (GameFramework.UIHandler)o;
			UnityEngine.Transform ret = obj.RootTransform;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RootTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.UIHandler obj = (GameFramework.UIHandler)o;
			int ret = obj.Count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Count on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CompNames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.UIHandler obj = (GameFramework.UIHandler)o;
			string[] ret = obj.CompNames;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CompNames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UIArray(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.UIHandler obj = (GameFramework.UIHandler)o;
			UnityEngine.EventSystems.UIBehaviour[] arg0 = ToLua.CheckObjectArray<UnityEngine.EventSystems.UIBehaviour>(L, 2);
			obj.UIArray = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UIArray on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RootTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.UIHandler obj = (GameFramework.UIHandler)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.RootTransform = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RootTransform on a nil value");
		}
	}
}

