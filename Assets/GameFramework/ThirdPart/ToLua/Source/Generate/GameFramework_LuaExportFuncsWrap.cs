//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameFramework_LuaExportFuncsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameFramework.LuaExportFuncs), typeof(System.Object));
		L.RegFunction("LoadGameObj", LoadGameObj);
		L.RegFunction("LoadTextAsset", LoadTextAsset);
		L.RegFunction("LoadTextAssetBytes", LoadTextAssetBytes);
		L.RegFunction("LoadScene", LoadScene);
		L.RegFunction("CountAsbGroup", CountAsbGroup);
		L.RegFunction("UnloadAsbGroup", UnloadAsbGroup);
		L.RegFunction("AddLuaBundle", AddLuaBundle);
		L.RegFunction("AddLuaBundles", AddLuaBundles);
		L.RegFunction("TestDelegate", TestDelegate);
		L.RegFunction("New", _CreateGameFramework_LuaExportFuncs);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameFramework_LuaExportFuncs(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameFramework.LuaExportFuncs obj = new GameFramework.LuaExportFuncs();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameFramework.LuaExportFuncs.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadGameObj(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string[], LuaInterface.LuaFunction>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string[] arg1 = ToLua.ToStringArray(L, 2);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 3);
				GameFramework.LuaExportFuncs.LoadGameObj(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, LuaInterface.LuaFunction>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 3);
				GameFramework.LuaExportFuncs.LoadGameObj(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.LuaExportFuncs.LoadGameObj");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadTextAsset(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string[], LuaInterface.LuaFunction>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string[] arg1 = ToLua.ToStringArray(L, 2);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 3);
				GameFramework.LuaExportFuncs.LoadTextAsset(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, LuaInterface.LuaFunction>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 3);
				GameFramework.LuaExportFuncs.LoadTextAsset(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.LuaExportFuncs.LoadTextAsset");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadTextAssetBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string[], LuaInterface.LuaFunction>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string[] arg1 = ToLua.ToStringArray(L, 2);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 3);
				GameFramework.LuaExportFuncs.LoadTextAssetBytes(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, LuaInterface.LuaFunction>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 3);
				GameFramework.LuaExportFuncs.LoadTextAssetBytes(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.LuaExportFuncs.LoadTextAssetBytes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
			LuaFunction arg4 = ToLua.CheckLuaFunction(L, 5);
			GameFramework.LuaExportFuncs.LoadScene(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CountAsbGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			GameFramework.LuaExportFuncs.CountAsbGroup(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAsbGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			GameFramework.LuaExportFuncs.UnloadAsbGroup(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLuaBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameFramework.LuaExportFuncs obj = (GameFramework.LuaExportFuncs)ToLua.CheckObject<GameFramework.LuaExportFuncs>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddLuaBundle(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLuaBundles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameFramework.LuaExportFuncs obj = (GameFramework.LuaExportFuncs)ToLua.CheckObject<GameFramework.LuaExportFuncs>(L, 1);
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			obj.AddLuaBundles(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TestDelegate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Action<float> arg0 = (System.Action<float>)ToLua.CheckDelegate<System.Action<float>>(L, 1);
			GameFramework.LuaExportFuncs.TestDelegate(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

